{"version":3,"sources":["services/repos.js","components/RepoTable/TableSkeleton.js","services/styles.js","components/RepoTable/TableRows.js","services/tabledata.js","components/RepoTable/TableHeader.js","components/RepoTable/RepoTable.js","components/Pagination.js","containers/App.js","index.js"],"names":["getRepos","a","fetch","response","json","result","repos","items","error","msg","message","useStyles","makeStyles","name","width","language","stars","forks","checkout","TableSkeleton","classes","Array","from","map","element","index","TableRow","key","TableCell","className","Skeleton","variant","table","minWidth","tbody","background","tHeadCell","color","fontSize","tBodyCell","TableRows","repo","id","align","stargazers_count","forks_count","Link","href","html_url","target","columns","label","TableHeader","TableHead","thead","column","style","RepoTable","loading","Table","stickyHeader","aria-label","TableBody","Pagination","handlePageChange","currentPage","perPage","ArrowBackIos","onClick","Typography","component","ArrowForwardIos","App","useState","page","reposPrPage","state","setState","useEffect","reposByPage","slice","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbe89126.chunk.js","sourcesContent":["const API_URL = \"https://api.github.com/search/repositories\";\n\n/***** \n* Function fetches 100 most stared javascript github repos \n* Returns an object containing an array of repos or an error object\n*****/\nexport const getRepos = async() => {\n  try {\n    const response = await fetch(`${API_URL}?q=language:javascript&sort=stars&order=desc&per_page=100`);\n    const result = await response.json();\n\n    return {\n      repos: result.items,\n      error: null,\n    };\n  } catch (error) {\n    return {\n      repos: null,\n      error: {\n        msg: error.message\n      },\n    };\n  }\n}","import React, { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { TableCell, TableRow } from \"@material-ui/core\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\n\nconst useStyles = makeStyles({\n  name: {\n    width:\"25%\"\n  },\n  language: {\n    width: \"16.3%\"\n  },\n  stars: {\n   width: \"9%\"\n  },\n  forks: {\n    width: \"9%\"\n  },\n  checkout: {\n    width: \"45%\"\n  }\n});\n\n\nconst TableSkeleton = () => {\n  const classes = useStyles();\n  \n  return (\n    <Fragment>\n      {\n        //Creates skeleton markup for 20 rows\n        Array.from(new Array(20)).map((element, index) => {\n          return(\n            <TableRow key={index}>\n              <TableCell className={classes.name}>\n                <Skeleton variant=\"text\" width=\"83%\" />\n              </TableCell>\n              <TableCell className={classes.language}>\n                <Skeleton variant=\"text\" width=\"83%\" />\n              </TableCell>\n              <TableCell className={classes.stars}>\n                <Skeleton variant=\"text\" width=\"83%\" />\n              </TableCell>\n              <TableCell className={classes.forks}>\n                <Skeleton variant=\"text\" width=\"83%\" />\n              </TableCell>\n              <TableCell className={classes.checkout}>\n                <Skeleton variant=\"text\" width=\"83%\" />\n              </TableCell>\n            </TableRow>\n          );\n        })\n      }\n    </Fragment>\n  ); \n};\n\nexport default TableSkeleton;\n","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  tbody: {\n    background: \"rgb(222, 222, 222)\"\n  },\n  tHeadCell: {\n    color: \"rgb(233, 233, 233)\",\n    fontSize: \"1.3rem\",\n    background: \"rgb(66, 66, 66)\",\n  },\n  tBodyCell: {\n    fontSize: \"1.2rem\"\n  },\n});\n\n","import React, { Fragment } from \"react\";\nimport { useStyles } from \"../../services/styles\";\nimport { \n  TableRow,\n  TableCell,\n  Link\n} from \"@material-ui/core\";\n\nconst TableRows = ({ repos }) => {\n  const classes = useStyles(); //assign imported styles from services/styles\n\n  return (\n    <Fragment>\n      {\n        repos.map(repo => (\n          <TableRow key={repo.id}>\n            <TableCell className={classes.tBodyCell}>{repo.name}</TableCell>\n            <TableCell className={classes.tBodyCell}>{repo.language}</TableCell>\n            <TableCell className={classes.tBodyCell} align=\"right\">{repo.stargazers_count}</TableCell>\n            <TableCell className={classes.tBodyCell} align=\"right\">{repo.forks_count}</TableCell>\n            <TableCell className={classes.tBodyCell}>\n              <Link href={repo.html_url} target=\"_blank\">\n                {repo.html_url}\n              </Link>\n            </TableCell>\n          </TableRow>\n        ))\n      }\n    </Fragment>\n  )\n}\n\nexport default TableRows;","export const columns = [\n  { label: \"Name\", width: 330 },\n  { label: \"Language\", width: 200 },\n  { label: \"Stars\", width: 100, align: \"right\" },\n  { label: \"Forks\", width: 100, align: \"right\" },\n  { label: \"Checkout\" },\n];","import React from \"react\";\nimport { useStyles } from \"../../services/styles\";\nimport { columns } from \"../../services/tabledata\";\nimport { \n  TableHead,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\n\nconst TableHeader = () => {\n  const classes = useStyles(); //assign imported styles from services/styles\n\n  return (\n    <TableHead>\n      <TableRow className={classes.thead}>\n        {\n          columns.map((column, index) => (\n            <TableCell\n              key={index}\n              align={column.align}\n              style={{ \n                width: column.width\n              }}\n              className={classes.tHeadCell}\n            >\n              {column.label}\n            </TableCell>\n          ))\n        }\n      </TableRow>\n    </TableHead>\n  );\n};\n\nexport default TableHeader;","import React from \"react\";\nimport TableSkeleton from \"./TableSkeleton\";\nimport { useStyles } from \"../../services/styles\";\nimport TableRows from \"./TableRows\";\nimport TableHeader from \"./TableHeader\";\nimport { \n  Table,\n  TableBody,\n} from \"@material-ui/core\";\n\n\nconst RepoTable = ({ repos, loading }) => {\n  const classes = useStyles(); //assign imported styles from services/styles\n\n  return (\n    <section className=\"table-container\">\n      <Table stickyHeader aria-label=\"sticky table\" className={classes.table}>\n        <TableHeader />\n        <TableBody className={classes.tbody}>\n          {\n            loading ? (\n              <TableSkeleton />\n            ) : (\n              <TableRows repos={repos} />\n            )\n          }\n        </TableBody>\n      </Table>\n    </section>\n  );\n};\n\nexport default RepoTable;","import React from \"react\";\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\nimport { Typography } from \"@material-ui/core\";\n\n\nconst Pagination = ({ handlePageChange, currentPage, perPage }) => {\n  return (\n    <footer className=\"pagination-container\">\n        {currentPage > 0 && <ArrowBackIos className=\"page-arrow back\" onClick={() => handlePageChange(-1)} />}\n        <Typography variant=\"h6\" component=\"p\" className=\"pagination-text\">\n          showing repos  {currentPage * perPage + 1 || 1}  -  {(currentPage+1) * perPage}  of 100\n        </Typography>\n        {currentPage < 4 && <ArrowForwardIos className=\"page-arrow forward\" onClick={() => handlePageChange(1)} />}\n    </footer>\n  )\n}\n\nexport default Pagination;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { getRepos } from \"../services/repos\";\nimport RepoTable from \"../components/RepoTable/RepoTable\";\nimport Pagination from \"../components/Pagination\";\nimport { Typography } from \"@material-ui/core\";\n\n\nconst App = () => {\n  const [state, setState] = useState({\n    repos: [],\n    page: 0,\n    reposPrPage: 20,\n    error: null,\n    loading: true\n  });\n\n  useEffect(\n    () => {\n      (async () => {\n        const response = await getRepos();\n        setState(state => ({\n          ...state,\n          repos: response.repos,\n          error: response.error,\n          loading: false,\n        }));\n      })();\n    },\n    [] //makes useEffect behave like componentDidMount()\n  );\n  \n  const { repos, page, reposPrPage, loading, error } = state;\n  \n  const reposByPage = repos.slice(page*reposPrPage, (page+1)* reposPrPage);   //Slice out 20 repos based on chosen page\n\n  const handlePageChange = (value) => {\n    setState({\n      ...state,\n      page: state.page + value,\n    });\n  };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h1\" component=\"h1\" id=\"main-heading\">GitHub Allstars</Typography>\n      {\n        error ? (\n          <Typography variant=\"h2\" component=\"h2\">Something went wrong. Please try again later...</Typography>\n        ) : (\n          <Fragment>\n            <RepoTable repos={reposByPage} loading={loading}/>\n            <Pagination handlePageChange={handlePageChange} currentPage={page} perPage={reposPrPage}/>\n          </Fragment>\n        )\n      }\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport \"./index.scss\";\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}